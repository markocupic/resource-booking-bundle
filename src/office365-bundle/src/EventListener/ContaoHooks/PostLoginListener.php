<?php

/**
 * @copyright  Marko Cupic 2020 <m.cupic@gmx.ch>
 * @author     Marko Cupic
 * @package    Office365Bundle for Schule Ettiswil
 * @license    MIT
 * @see        https://github.com/markocupic/office365-bundle
 *
 */

namespace Markocupic\Office365Bundle\EventListener\ContaoHooks;

use Contao\BackendUser;
use Contao\CoreBundle\Monolog\ContaoContext;
use Contao\CoreBundle\ServiceAnnotation\FrontendModule;
use Contao\CoreBundle\ServiceAnnotation\Hook;
use Contao\Database;
use Contao\FrontendUser;
use Contao\Message;
use Contao\User;
use Psr\Log\LoggerInterface;
use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;
use Terminal42\ServiceAnnotationBundle\ServiceAnnotationInterface;

/**
 * Class PostLoginListener
 * @package Markocupic\Office365Bundle\EventListener\ContaoHooks
 */
class PostLoginListener implements ServiceAnnotationInterface
{

    /** @var EncoderFactoryInterface */
    protected $encoderFactory;

    /** @var  LoggerInterface */
    protected $logger;

    /**
     * PostLoginListener constructor.
     * @param EncoderFactoryInterface $encoderFactory
     * @param LoggerInterface|null $logger
     */
    public function __construct(EncoderFactoryInterface $encoderFactory, LoggerInterface $logger = null)
    {
        $this->encoderFactory = $encoderFactory;
        $this->logger = $logger;
    }

    /**
     * @Hook("postLogin")
     */
    public function onPostLogin(User $user): void
    {
        if ($user instanceof BackendUser)
        {
            if ($user->admin)
            {
                // Autogenerate users from tl_office365_member
                $this->generateUsers('tl_member');
                $this->generateUsers('tl_user');
            }
        }
    }

    /**
     * Create frontend or backend user
     * @param string $strTable
     */
    protected function generateUsers(string $strTable): void
    {
        $userClass = ($strTable === 'tl_member') ? FrontendUser::class : BackendUser::class;

        // Do something with the front end user $user
        $objDb = Database::getInstance()->prepare('SELECT * FROM tl_office365_member')->execute();
        while ($objDb->next())
        {
            $arrAccountTypes = ['teacher'];
            if (!in_array($objDb->accountType, $arrAccountTypes))
            {
                continue;
            }

            // Skip if there is no password set
            if (trim((string) $objDb->initialPassword) === '')
            {
                continue;
            }

            // Skip if there is no email set
            if (trim((string) $objDb->email) === '')
            {
                continue;
            }

            // Skip if user is disabled
            if ($objDb->disable)
            {
                continue;
            }


            /** @var array $arrChunks */
            $arrChunks = explode('@', $objDb->email);

            /** @var array $arrName */
            $arrName = explode('.', $arrChunks[0]);

            $objUser = Database::getInstance()->prepare("SELECT * FROM " . $strTable . " WHERE email=?")->execute($objDb->email);
            if ($objUser->count())
            {
                continue;
            }

            // Encode password
            $encoder = $this->encoderFactory->getEncoder($userClass);
            $password = $encoder->encodePassword($objDb->initialPassword, null);

            if ($strTable === 'tl_member')
            {
                $set = [
                    'username'  => $arrChunks[0],
                    'firstname' => ucfirst($arrName[0]),
                    'lastname'  => ucfirst($arrName[1]),
                    'email'     => $objDb->email,
                    'password'  => $password,
                    'login'     => '1',
                    'dateAdded' => time(),
                    'tstamp'    => time(),
                    'language'  => 'de',
                ];

                // Insert datarecord
                Database::getInstance()->prepare("INSERT INTO " . $strTable . " %s")->set($set)->execute();

                // System log
                $this->logInfoMsg(sprintf('Autogenerated Frontend User "%s %s".'));

                // Show message in the backend
                Message::addInfo(sprintf('Autogenerated Frontend User "%s %s". Please add the user to the correct group.', $set['firstname'], $set['lastname']), 'BE');
            }
            elseif ($strTable === 'tl_user')
            {
                $set = [
                    'username'  => $arrChunks[0],
                    'name'      => ucfirst($arrName[0]) . ' ' . ucfirst($arrName[1]),
                    'email'     => $objDb->email,
                    'password'  => $password,
                    'dateAdded' => time(),
                    'pwChange'  => '1',
                    'tstamp'    => time(),
                    'language'  => 'de',
                ];

                // Insert datarecord
                Database::getInstance()->prepare("INSERT INTO " . $strTable . " %s")->set($set)->execute();

                // System log
                $this->logInfoMsg(sprintf('Autogenerated Backend User "%s".', $set['name']));

                // Show message in the backend
                Message::addInfo(sprintf('Autogenerated Backend User "%s". Please add the user to the correct group.', $set['name']), 'BE');
            }

        }
    }

    /**
     * @param string $strMessage
     */
    protected function logInfoMsg(string $strMessage): void
    {
        if ($this->logger)
        {
            $this->logger->info(
                $strMessage,
                ['contao' => new ContaoContext(__METHOD__, ContaoContext::GENERAL)]
            );
        }
    }
}
